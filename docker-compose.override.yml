version: "3.8"

services:
  db:
    container_name: db
    image: postgis/postgis:12-master
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - shopnet
    expose:
      - 5432
    env_file: ./config/.env_db
    environment:
      POSTGRES_USER: 'user'
      POSTGRES_PASSWORD: 'password'
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "user" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    networks:
      - shopnet
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"


  shop: &shop
    container_name: shop
    env_file: ./config/.env_shop
    build:
      target: development_build
      args:
        DJANGO_ENV: 'dev'
    volumes:
      - ./shop:/code
      - ./config:/config
    environment:
      DJANGO_DEBUG: 1
#      SQL_ENGINE: 'django.contrib.gis.db.backends.postgis'
#      SQL_DATABASE: 'postgresql://postgres:postgres@db:5432/shop_db'
#      SQL_USER: 'user'
#      SQL_PASSWORD: 'password'
#      SQL_PORT: 5432
#      SQL_HOST: 'db'
    depends_on:
      - db
    command: sh /runserver.sh

  warehouse: &warehouse
    container_name: warehouse
    env_file: ./config/.env_warehouse
    build:
      target: development_build
      args:
        DJANGO_ENV: 'dev'
    volumes:
      - ./warehouse:/code
      - ./config:/config
    environment:
      DJANGO_DEBUG: 1
#      SQL_ENGINE: 'django.db.backends.postgresql_psycopg2'
#      SQL_DATABASE: 'postgresql://postgres:postgres@db:5432/warehouse_db'
#      SQL_USER: 'user'
#      SQL_PASSWORD: 'password'
#      SQL_PORT: 5432
#      SQL_HOST: 'db'
    depends_on:
      - db
    command: sh /runserver.sh

#  celery:
#    <<: *shop
#    container_name: celery
#    environment:
#      C_FORCE_ROOT: 'true'
#      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/dev_db'
#      DATABASE_HOST: 'db'
#      DATABASE_PORT: '5432'
#      REDIS_URL: 'redis://redis:6379/0'
#      REDIS_CACHE: 'redis:6379'
#      AMQP_URL: 'amqp://rabbitmq:5672'
#      CHECK_WEB: 'true'
#      WEB_HOST: 'web'
#      WEB_PORT: '8000'
#    depends_on:
#      - redis
#      - db
#    command: celery -A core worker -B -l INFO

#  flower:
#    <<: *web
#    build:
#      context: .
#      dockerfile: ./docker/backend/Dockerfile
#      target: development_build
#      args:
#        DJANGO_ENV: 'dev'
#    container_name: flower
#    environment:
#      C_FORCE_ROOT: 'true'
#      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/dev_db'
#      DATABASE_HOST: 'db'
#      DATABASE_PORT: '5432'
#      REDIS_URL: 'redis://redis:6379/0'
#      REDIS_CACHE: 'redis:6379'
#      AMQP_URL: 'amqp://rabbitmq:5672'
#      CHECK_WEB: 'true'
#      WEB_HOST: 'web'
#      WEB_PORT: '8000'
#    networks:
#      - webnet
#      - nginx_network
#    expose:
#      - 5555
#    depends_on:
#      - celery
#      - redis
#      - db
#    command: flower -A core --port=5555

#  flower:
#    image: mher/flower:0.9.5
#    container_name: flower
#    networks:
#      - webnet
#      - nginx_network
#    expose:
#      - 5555
#    depends_on:
#      - celery
#      - redis
#      - db
#    command: [ "--app core", "--port=5555", "--url_prefix=flower", "--broker=amqp://rabbitmq:5672", "--broker_api=amqp://rabbitmq:15672" ]
#
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    command: [ "-smtp-bind-addr", "0.0.0.0:25" ]
    user: root
    restart: on-failure
    networks:
      - shopnet
      - nginx_network
    expose:
      - 25
      - 8025
    healthcheck:
      test: [ "CMD", "echo", "|", "telnet", "127.0.0.1 25" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    build:
      target: development_build
    ports:
      - 8025:8025
      - 5555:5555
    depends_on:
      - mailhog
#      - flower

volumes:
  db-data: